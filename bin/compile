#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

if [ $STACK != "cedar-14" ]; then
	echo "Stack ${STACK} not supported" && exit 1
fi

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
LD_DIR=`cd $(dirname $0); cd ..; pwd`

: ${LIBUV_VERSION:="1.8.0"}
: ${DNVM_BRANCH:="dev"}
: ${DNX_VERSION:="latest"}

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

mkdir -p ${BUILD_DIR}/build_pack
cp -rf ${LD_DIR}/bin/* ${BUILD_DIR}/build_pack
ls ${BUILD_DIR} -l

COMPILE_PATH="${BUILD_DIR}/vendor"
TARGET_PATH="${COMPILE_PATH}/aspwebapp"
mkdir -p ${COMPILE_PATH}
mkdir -p ${TARGET_PATH}

if [ -n "$BUILD_DEBUG" ]; then
	DNU_FLAGS=""
	echo "DNX_VERSION: ${DNX_VERSION}"
	echo "DNVM_BRANCH: ${DNVM_BRANCH}"
else
	DNU_FLAGS="--quiet"
fi

if [ -n "$UNSTABLE_TOOLCHAIN" ]; then
	DNVM_FLAGS="-u"
else
	DNVM_FLAGS=""
fi

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

topic "Updating apt caches"
#apt-get $APT_OPTIONS update | indent

# Download prerequisite packages from Aptfile
for PACKAGE in $(cat $COMPILE_PATH/Aptfile); do
  if [[ $PACKAGE == *deb ]]; then
    PACKAGE_NAME=$(basename $PACKAGE .deb)
    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

    topic "Fetching $PACKAGE"
    curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
  else
    topic "Fetching .debs for $PACKAGE"
    apt-get $APT_OPTIONS -y --force-yes -d install --reinstall $PACKAGE | indent
  fi
done

mkdir -p ${COMPILE_PATH}/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB $COMPILE_PATH/.apt/
done

topic "Writing profile script"
mkdir -p ${COMPILE_PATH}/.profile.d
cat <<EOF >${COMPILE_PATH}/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

export PATH="$COMPILE_PATH/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="$COMPILE_PATH/.apt/usr/lib/x86_64-linux-gnu:$COMPILE_PATH/.apt/usr/lib/i386-linux-gnu:$COMPILE_PATH/.apt/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$COMPILE_PATH/.apt/usr/lib/x86_64-linux-gnu:$COMPILE_PATH/.apt/usr/lib/i386-linux-gnu:$COMPILE_PATH/.apt/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$COMPILE_PATH/.apt/usr/include:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$COMPILE_PATH/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$COMPILE_PATH/.apt/usr/lib/i386-linux-gnu/pkgconfig:$COMPILE_PATH/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

#give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$LD_DIR/export"
echo "Dependencies downloaded and extracted"

#DNVM configuration starts
touch ${HOME}/.profile
curl -sSL https://raw.githubusercontent.com/aspnet/Home/${DNVM_BRANCH}/dnvminstall.sh | DNX_BRANCH=dev sh && source ${HOME}/.dnx/dnvm/dnvm.sh
dnvm
export DNVM_RUNTIME_LOCAL_CACHE="${HOME}/.dnx"
export DNVM_RUNTIME_CACHE_LOCATION="${CACHE_DIR}/dnx/runtimes"
mkdir -p ${DNVM_RUNTIME_LOCAL_CACHE}
mkdir -p ${DNVM_RUNTIME_CACHE_LOCATION}
export PATH="$DNVM_RUNTIME_LOCAL_CACHE:$DNVM_RUNTIME_CACHE_LOCATION:$PATH"
ln -s ${DNVM_RUNTIME_CACHE_LOCATION} ${DNVM_RUNTIME_LOCAL_CACHE}/runtimes

echo "dnvm install $DNX_VERSION $DNVM_FLAGS -runtime coreclr -alias default"
dnvm install $DNX_VERSION $DNVM_FLAGS -runtime coreclr -alias default
echo "dnvm installed."

echo "DNVM to install DNX for .NET Core"
dnvm upgrade -runtime coreclr
echo "dnvm upgraded."

#DNX setting
export DNX_BUILD_LOCATION=${COMPILE_PATH}/.dnx/runtimes/
mkdir -p ${DNX_BUILD_LOCATION}
DNX_VERSION=$(dnvm alias default)
cp -r ${HOME}/.dnx/runtimes/`dnvm alias default` ${DNX_BUILD_LOCATION}
DNX_RUNTIME_LINK=`which dnx`
export PATH="$DNX_RUNTIME_LINK:$DNX_BUILD_LOCATION:$PATH"

#DNU cache setting
export DNU_LOCAL_CACHE="${HOME}/.local/share/dnu"
export DNU_CACHE_LOCATION="${CACHE_DIR}/dnu/cache"
mkdir -p ${DNU_LOCAL_CACHE}
mkdir -p ${DNU_CACHE_LOCATION}
ln -s ${DNU_CACHE_LOCATION} ${DNU_LOCAL_CACHE}/cache 
export PATH="$DNU_LOCAL_CACHE:$DNU_CACHE_LOCATION:$PATH"

#Find project.json
PROJECT_JSON_FILES=$(find ${BUILD_DIR}/. -maxdepth 3 -iname "project.json")
printf 'Found %s project.json files\n' $(echo "$PROJECT_JSON_FILES" | wc -l | tr -d ' ')
PROJECT_JSON_FILE=$(echo "$PROJECT_JSON_FILES" | head -1)

echo "bootstrap file creation"
cat <<EOF > ${BUILD_DIR}/bootstrap
#!/usr/bin/env bash

uname -r
echo "Current path: `pwd`"
echo "app dir:"
ls ${HOME}/* -l -h

$DNX_RUNTIME_LINK --version
web: $DNX_RUNTIME_LINK -p $PROJECT_JSON_FILE web --port $PORT

EOF

echo "Procfile setting:-"
echo "web: ./bootstrap" > ${BUILD_DIR}/Procfile
#echo "web: $DNX_RUNTIME_LINK p- $PROJECT_JSON_FILE web --server-urls http://*:$PORT" > $BUILD_DIR/Procfile
chmod 777 ${BUILD_DIR}/bootstrap

#Copy source code
cp -rf ${BUILD_DIR}/* ${COMPILE_PATH}/
ls ${COMPILE_PATH}/ -l

echo "dnvm runtimes"
dnvm list

#libuv configuration
topic "libuv install"
curl -sSL https://github.com/libuv/libuv/archive/v${LIBUV_VERSION}.tar.gz | tar zxfv - -C ${COMPILE_PATH}
cd ${COMPILE_PATH}/libuv-${LIBUV_VERSION}
sh autogen.sh
./configure --prefix=$HOME/libuvinstall
make
make install
export LD_LIBRARY_PATH="\$HOME/libuvinstall:$LD_LIBRARY_PATH"
cd $OLDPWD
topic "libuv installed."

#DNU restore using project.json
echo "dnu restore $DNU_FLAGS ${PROJECT_JSON_FILE}"
dnu restore ${DNU_FLAGS} ${PROJECT_JSON_FILE} --no-cache

#DNU pulish using project.json
topic "dnu publish starts."
echo "Deploment location: $COMPILE_PATH"
dnu publish --out ${TARGET_PATH} ${DNU_FLAGS} --configuration Release ${PROJECT_JSON_FILE} --no-source --runtime ${DNX_VERSION}
topic "dnu publish ended."
