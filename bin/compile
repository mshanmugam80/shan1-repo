#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

if [ $STACK != "cedar-14" ]; then
	echo "Stack ${STACK} not supported" && exit 1
fi

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
LD_DIR=`cd $(dirname $0); cd ..; pwd`
echo "Environment path: $ENV_DIR"

: ${LIBUV_VERSION:="1.8.0"}
: ${DNVM_BRANCH:="dev"}
: ${DNX_VERSION:="latest"}

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

export DEPLOYMENT_PATH="${HOME}/vendor/aspwebapp"
mkdir -p ${DEPLOYMENT_PATH}
cp -r ${BUILD_DIR}/* ${DEPLOYMENT_PATH}
cd ${DEPLOYMENT_PATH}
export PATH="$DEPLOYMENT_PATH:$PATH"

if [ -n "$BUILD_DEBUG" ]; then
	DNU_FLAGS=""
	echo "DNX_VERSION: ${DNX_VERSION}"
	echo "DNVM_BRANCH: ${DNVM_BRANCH}"
else
	DNU_FLAGS="--quiet"
fi

if [ -n "$UNSTABLE_TOOLCHAIN" ]; then
	DNVM_FLAGS="-u"
else
	DNVM_FLAGS=""
fi
echo "DNVM FLAGS: ${DNVM_FLAGS}"

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"

mkdir -p "$APT_CACHE_DIR/archives/partial"
mkdir -p "$APT_STATE_DIR/lists/partial"

APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"

topic "Updating apt caches"
#apt-get $APT_OPTIONS update | indent

mkdir -p ${CACHE_DIR}
export PATH="/app/aspnet/bin:${PATH}"
export LD_LIBRARY_PATH="/app/aspnet/lib:${LD_LIBRARY_PATH}"

# Install DNX
touch ~/.profile
curl -sSL https://raw.githubusercontent.com/aspnet/Home/${DNVM_BRANCH}/dnvminstall.sh | DNX_BRANCH=dev sh && source ~/.dnx/dnvm/dnvm.sh
dnvm

for PACKAGE in $(cat $DEPLOYMENT_PATH/Aptfile); do
  if [[ $PACKAGE == *deb ]]; then
    PACKAGE_NAME=$(basename $PACKAGE .deb)
    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

    topic "Fetching $PACKAGE"
    curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
  else
    topic "Fetching .debs for $PACKAGE"
    apt-get $APT_OPTIONS -y --force-yes -d install --reinstall $PACKAGE | indent
  fi
done

mkdir -p $DEPLOYMENT_PATH/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB $DEPLOYMENT_PATH/.apt/
done

topic "Writing profile script"
mkdir -p $DEPLOYMENT_PATH/.profile.d
cat <<EOF >$DEPLOYMENT_PATH/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

export PATH="$DEPLOYMENT_PATH/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="$DEPLOYMENT_PATH/.apt/usr/lib/x86_64-linux-gnu:$DEPLOYMENT_PATH/.apt/usr/lib/i386-linux-gnu:$DEPLOYMENT_PATH/.apt/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$DEPLOYMENT_PATH/.apt/usr/lib/x86_64-linux-gnu:$DEPLOYMENT_PATH/.apt/usr/lib/i386-linux-gnu:$DEPLOYMENT_PATH/.apt/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$DEPLOYMENT_PATH/.apt/usr/include:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$DEPLOYMENT_PATH/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$DEPLOYMENT_PATH/.apt/usr/lib/i386-linux-gnu/pkgconfig:$DEPLOYMENT_PATH/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

#give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$LD_DIR/export"

echo "Dependencies downloaded and extracted"
export DNVM_RUNTIME_LOCAL_CACHE="/app/.dnx"
export DNVM_RUNTIME_CACHE_LOCATION="${CACHE_DIR}/dnx/runtimes"
mkdir -p ${DNVM_RUNTIME_LOCAL_CACHE}
mkdir -p ${DNVM_RUNTIME_CACHE_LOCATION}
ln -s ${DNVM_RUNTIME_CACHE_LOCATION} ${DNVM_RUNTIME_LOCAL_CACHE}/runtimes

echo "dnvm install $DNX_VERSION $DNVM_FLAGS -runtime coreclr -alias default"
dnvm install $DNX_VERSION $DNVM_FLAGS -runtime coreclr -alias default
echo "dnvm installed."

echo "DNVM to install DNX for .NET Core"
dnvm upgrade -runtime coreclr
echo "dnvm upgraded."

topic "libuv install"
curl -sSL https://github.com/libuv/libuv/archive/v${LIBUV_VERSION}.tar.gz | tar zxfv - -C ${DEPLOYMENT_PATH}
cd ${DEPLOYMENT_PATH}/libuv-${LIBUV_VERSION}
sh autogen.sh
./configure --prefix=$HOME/libuvinstall
make
make install
export LD_LIBRARY_PATH="\$HOME/libuvinstall:$LD_LIBRARY_PATH"
cd $OLDPWD
topic "libuv installed."

# Add DNX to the build output
DNX_BUILD_LOCATION=${DEPLOYMENT_PATH}/.dnx/runtimes/
mkdir -p ${DNX_BUILD_LOCATION}
DNX_VERSION=$(dnvm alias default)
cp -r ~/.dnx/runtimes/`dnvm alias default` ${DNX_BUILD_LOCATION}
DNX_RUNTIME_PATH="$DNX_BUILD_LOCATION/$DNX_VERSION/bin"

mkdir -p $DEPLOYMENT_PATH/approot
cat <<EOF >$DEPLOYMENT_PATH/approot/web
echo "DNX VERSION"
$DNX_RUNTIME_PATH/dnx --version
web: $DNX_RUNTIME_PATH/dnx -p $DEPLOYMENT_PATH/project.json web "$@"
EOF

echo "Approot Path: $DEPLOYMENT_PATH/approot"
ls $DEPLOYMENT_PATH/approot -l

if [ -n "project.json" ]; then
   PROJECT_JSON_FILES=$(find ${DEPLOYMENT_PATH}/. -maxdepth 3 -iname "project.json")
   printf 'Found %s project.json files\n' $(echo "$PROJECT_JSON_FILES" | wc -l | tr -d ' ')
   PROJECT_JSON_FILE=$(echo "$PROJECT_JSON_FILES" | head -1)
fi
echo "Building ${PROJECT_JSON_FILE}"

export DNU_LOCAL_CACHE="/app/.local/share/dnu"
export DNU_CACHE_LOCATION="${CACHE_DIR}/dnu/cache"
mkdir -p ${DNU_LOCAL_CACHE}
mkdir -p ${DNU_CACHE_LOCATION}
ln -s ${DNU_CACHE_LOCATION} ${DNU_LOCAL_CACHE}/cache 

echo "dnvm runtimes"
dnvm list

echo "dnu restore $DNU_FLAGS ${PROJECT_JSON_FILE}"
dnu restore $DNU_FLAGS ${PROJECT_JSON_FILE} --no-cache

topic "dnu publish starts."
echo "Deploment location: $DEPLOYMENT_PATH"
dnu publish $DNU_FLAGS --configuration Release ${PROJECT_JSON_FILE} --no-source --runtime $DNX_VERSION
topic "dnu publish ended."

topic "Profile file setting:"
cat <<EOF > Procfile
    web: /app/vendor/aspwebapp/approot/web --server.urls http://+:$PORT
EOF
# Clean out core-stuff that we don't need in the slug
#find ${BUILD_DIR} -iname dnxcore50 -print0 | xargs -r -0 rm --
